definitions:
  models.Book:
    properties:
      author:
        type: string
      title:
        type: string
    type: object
  models.Credential:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.User:
    properties:
      credential:
        $ref: '#/definitions/models.Credential'
      name:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact: {}
  description: This is a sample swagger for simple book api
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Book API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Credential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Login
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Register
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create user
      tags:
      - Authentication
  /book:
    get:
      consumes:
      - application/json
      description: Get all the books from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      security:
      - BearerAuth: []
      summary: List of books
      tags:
      - Books
  /book/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a single book from the database
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Delete book by id
      tags:
      - Books
    get:
      consumes:
      - application/json
      description: Read a single book from the database
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      security:
      - BearerAuth: []
      summary: Get book by id
      tags:
      - Books
  /book/new:
    post:
      consumes:
      - application/json
      description: Create a new book
      parameters:
      - description: Book
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create book
      tags:
      - Books
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
